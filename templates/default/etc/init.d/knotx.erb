#!/bin/sh

#
# chkconfig: - 80 20
# processname: <%= @id %>
# description: Knotx - reactive microservice assembler
#

### BEGIN INIT INFO
# Provides: <%= @id %>
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Short-Description: start and stop <%= @id %>
### END INIT INFO

. /etc/rc.d/init.d/functions

CONFIG_FILE="<%= @home_dir %>/knotx.conf"

[ -e $CONFIG_FILE ] && . $CONFIG_FILE

start()
{
  echo -n $"Starting <%= @id %>: "
  runuser -l "<%= @user %>" -c "<%= @java_home %>/bin/java \
  ${KNOTX_GENERAL_OPTS} \
  ${KNOTX_GC_OPTS} \
  ${KNOTX_JMX_OPTS} \
  ${KNOTX_DEBUG_OPTS} \
  -Xms${KNOTX_MIN_HEAP}m \
  -Xmx${KNOTX_MAX_HEAP}m \
  -XX:+UseBiasedLocking \
  -XX:BiasedLockingStartupDelay=0 \
  -Dlogback.configurationFile=<%= ::File.join(@conf_dir, 'logback.xml') %> \
  -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory \
  -Dknotx.home=<%= @home_dir %> \
  -Dvertx.cacheDirBase=<%= ::File.join(@home_dir, '.vertx' ) %> \
  -Dvertx.cli.usage.prefix=knotx \
  -classpath ':<%= @conf_dir %>:<%= ::File.join(@lib_dir, '*') %>' \
  $KNOTX_EXTRA_OPTS \
  io.vertx.core.Launcher run-knotx >> /dev/null 2>&1 &" && echo_success || echo_failure
  RETVAL=$?
  echo
  if [ $RETVAL -ne 0 ] ; then
    echo "Error while starting <%= @id %>. Error code from java: [$RETVAL]"
  fi
}

get_pid()
{
  ps -aefw | grep "<%= @home_dir %>" | grep -v " grep " | awk '{print $2}'
}

do_start()
{
  PID=`get_pid`
  if [ ! -z $PID ] ; then
    echo "<%= @id %> is already running"
    RETVAL=0
  else
    start
  fi
}

do_stop()
{
  PID=`get_pid`
  if [ ! -z $PID ] ; then
    echo -n $"Stopping <%= @id %>: "
    kill -9 $PID > /dev/null 2>&1 && echo_success || echo_failure
    RETVAL=$?
    echo
    if [ $RETVAL -ne 0 ] ; then
      echo "<%= @id %> failed to stop"
    fi
  else
    echo "<%= @id %> is already stopped"
  fi
}

do_status()
{
  PID=`get_pid`
  if [ ! -z $PID ] ; then
    echo "<%= @id %> is running"
    RETVAL=0
  else
    echo "<%= @id %> is stopped"
    RETVAL=3
  fi
}

case "$1" in
start)
  do_start
;;
stop)
  do_stop
;;
restart)
  do_stop
  do_start
;;
status)
  do_status
;;
*)
echo "Usage: $0 {start|stop|restart}"
RETVAL=1
esac

exit $RETVAL
